From 319c7e913ea1f13659e1e2dba824bac2a92a81f5 Mon Sep 17 00:00:00 2001
From: Robert Church <robert.church@windriver.com>
Date: Tue, 10 May 2016 23:28:56 -0500
Subject: [PATCH 1/9] Pike Rebase: Memory leak from timings

Historical commit from meta-cloud-services:

commit 694e37cc0e86e377fc99f4cdc26678cb88793c75
Author: Amy Fong <amy.fong@windriver.com>
Date:   Fri Mar 28 15:58:45 2014 -0400

    Memory leak from timings

    Memory leak happens when the dynamic list times grows without anything to
    reset it.

    In ceilometer and cinder configuration files, the new option is created:
    [nova_client]
    max_timing_buffer=<value>

    In all clients found that uses extends the HTTPClient and uses the times
    list, we limit the size of the list by popping off the oldest item in the
    list to maintain a maximum size. A default size of 200 is chosen,
    configurable by the above configuration option.

    Signed-off-by: Amy Fong <amy.fong@windriver.com>
    Signed-off-by: Bruce Ashfield <bruce.ashfield@windriver.com>

Related commits:
  - Newton commits: (CGCS_DEV_0027) 7030df8

(cherry picked from commit 37d6bcb39208104dfb6bacbac04b5a77dab4930a)
Signed-off-by: Robert Church <robert.church@windriver.com>
---
 cinderclient/apiclient/client.py | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/cinderclient/apiclient/client.py b/cinderclient/apiclient/client.py
index 1752e8f..a2ea7f3 100644
--- a/cinderclient/apiclient/client.py
+++ b/cinderclient/apiclient/client.py
@@ -93,6 +93,7 @@ class HTTPClient(object):
         self.user_agent = user_agent or self.user_agent
 
         self.times = []  # [("item", starttime, endtime), ...]
+        self.times_max_len = 200
         self.timings = timings
 
         # requests within the same session can reuse TCP connections from pool
@@ -152,6 +153,12 @@ class HTTPClient(object):
     def reset_timings(self):
         self.times = []
 
+    def get_timings_max_len(self):
+        return self.times_max_len
+
+    def set_timings_max_len(self, new_len):
+        self.times_max_len = new_len
+
     def request(self, method, url, **kwargs):
         """Send an http request with the specified characteristics.
 
@@ -183,6 +190,9 @@ class HTTPClient(object):
         if self.timings:
             self.times.append(("%s %s" % (method, url),
                                start_time, time.time()))
+            # remove oldest items until we maintain max length
+            while len(self.times) > self.times_max_len:
+                del self.times[0]
         self._http_log_resp(resp)
 
         if resp.status_code >= 400:
-- 
2.7.4

